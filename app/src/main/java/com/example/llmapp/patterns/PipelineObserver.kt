package com.example.llmapp.patterns

/**
 * Observer interface for the Pipeline processing events
 * Implements the Observer pattern to allow components to be notified of pipeline events
 */
interface PipelineObserver {
    /**
     * Called when an email is fetched from Gmail
     * @param emailId The ID of the fetched email
     * @param subject The subject of the fetched email
     */
    fun onEmailFetched(emailId: String, subject: String)
    
    /**
     * Called when an email starts processing with the LLM
     * @param emailId The ID of the email being processed
     * @param subject The subject of the email being processed
     */
    fun onProcessingStarted(emailId: String, subject: String)
    
    /**
     * Called when LLM processing is complete
     * @param emailId The ID of the processed email
     * @param subject The subject of the processed email
     * @param summary The summary generated by the LLM
     */
    fun onProcessingComplete(emailId: String, subject: String, summary: String)
    
    /**
     * Called when the processed email is sent to Telegram
     * @param emailId The ID of the email that was sent
     * @param subject The subject of the email that was sent
     * @param success Whether the sending was successful
     * @param message Success or error message
     */
    fun onEmailSent(emailId: String, subject: String, success: Boolean, message: String)
    
    /**
     * Called when the entire batch processing is complete
     * @param successCount Number of successfully processed emails
     * @param failureCount Number of failed emails
     */
    fun onBatchComplete(successCount: Int, failureCount: Int)
}
